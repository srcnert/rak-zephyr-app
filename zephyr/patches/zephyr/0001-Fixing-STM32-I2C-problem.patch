From 9a031fbe69c6a9f592f319d33f267ca47a0e75e1 Mon Sep 17 00:00:00 2001
From: srcnert <sercanerat@gmail.com>
Date: Fri, 13 Dec 2024 16:07:03 +0300
Subject: [PATCH 1/6] Fixing STM32 I2C problem

---
 drivers/i2c/i2c_ll_stm32.c | 38 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/drivers/i2c/i2c_ll_stm32.c b/drivers/i2c/i2c_ll_stm32.c
index 677d1f688e5..db575297ea4 100644
--- a/drivers/i2c/i2c_ll_stm32.c
+++ b/drivers/i2c/i2c_ll_stm32.c
@@ -449,12 +449,50 @@ static int i2c_stm32_init(const struct device *dev)
 
 #ifdef CONFIG_PM_DEVICE
 
+#if defined(CONFIG_SOC_SERIES_STM32WLX)
+// https://github.com/hardwario/sticker-zephyr/commit/ccf70f350abbfa91bb9bbbc69efbad2868ab182e#diff-f46c0e00cabed812e7aa6f6672d36df7a914ee1f398224bf614ec3af6ad1c8ac
+static int i2c_stm32_reinit_timing(const struct device *dev)
+{
+	int ret;
+	const struct i2c_stm32_config *cfg = dev->config;
+	const struct device *const clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
+	uint32_t i2c_clock = 0U;
+
+	if (IS_ENABLED(STM32_I2C_DOMAIN_CLOCK_SUPPORT) && (cfg->pclk_len > 1)) {
+		if (clock_control_get_rate(clk, (clock_control_subsys_t)&cfg->pclken[1],
+					&i2c_clock) < 0) {
+			LOG_ERR("Failed call clock_control_get_rate(pclken[1])");
+			return -EIO;
+		}
+	} else {
+		if (clock_control_get_rate(clk, (clock_control_subsys_t)&cfg->pclken[0],
+					&i2c_clock) < 0) {
+			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
+			return -EIO;
+		}
+	}
+
+#ifdef CONFIG_PM_DEVICE_RUNTIME
+	ret = clock_control_on(clk, (clock_control_subsys_t)&cfg->pclken[0]);
+	if (ret < 0) {
+		LOG_ERR("failure Enabling I2C clock");
+		return ret;
+	}
+#endif
+
+	ret = stm32_i2c_configure_timing(dev, i2c_clock);
+
+	return ret;
+}
+#endif
+
 static int i2c_stm32_pm_action(const struct device *dev, enum pm_device_action action)
 {
 	int err;
 
 	switch (action) {
 	case PM_DEVICE_ACTION_RESUME:
+		i2c_stm32_reinit_timing(dev);
 		err = i2c_stm32_activate(dev);
 		break;
 	case PM_DEVICE_ACTION_SUSPEND:
-- 
2.45.0

